#!python3
import sys
import re
from signal import signal, SIGPIPE, SIG_DFL

def get_log(file_name = ""):
    if not file_name:
        text = ""
        with sys.stdin as infile:
            for line in infile:
                text += line
        return text
    else:
        handle = open(file_name)
        text = handle.read()
        handle.close()
        return text

def tokenize(log):
    requests_pattern = "^={80}$\n.*s elapsed\n^---- Requests -+\n^(?:> \w* * .*\n)+^---- Errors -*\n(?:> .*\n)*^\n*^---- \w* -*\n^\[[#\- ]*\].*\n^.*\n={80}\n"
    requests_re = re.compile(requests_pattern, re.MULTILINE)
    return requests_re.findall(log)
    

def main():
    # make script pipeable and prevent BrokenPipe error when piping out. https://stackoverflow.com/questions/14207708/ioerror-errno-32-broken-pipe-python
    signal(SIGPIPE, SIG_DFL)

    log = ""
    if len(sys.argv) == 1:
        log = get_log()
    elif len(sys.argv) < 2:
        sys.stderr.write("Too few args. Expected 1\n")
        sys.stdout.write("Usage: cmd <file_name>\n")
        return 1
    else:
        # index 0 is the location of this script. first arg starts at index 1
        log_file_name = sys.argv[1]
        log = get_log(log_file_name)

    requests_list = tokenize(log)
    for req in requests_list:
        if re.search("\[#+\]100%", req):
            print(req)

if __name__ == "__main__":
    main()
